#!/usr/bin/env python

import os
import sys
import optparse
import numpy as np
from numpy.random import randint

def cb_string(option, opt_str, value, parser):
	args=[]
	for arg in parser.rargs:
		if arg[0] != "-":
			args.append(arg)
		else:
			del parser.rargs[:len(args)]
			break
	if getattr(parser.values, option.dest):
		args.extend(getattr(parser.values, option.dest))
	setattr(parser.values, option.dest, args)

def cb_float(option, opt_str, value, parser):
	args=[]
	for arg in parser.rargs:
		if arg[0] != "-":
			args.append(float(arg))
		else:
			del parser.rargs[:len(args)]
			break
	if getattr(parser.values, option.dest):
		args.extend(getattr(parser.values, option.dest))
	setattr(parser.values, option.dest, args)

random_num = randint(1000)
root_path = os.path.split(os.path.dirname(os.path.realpath( __file__ )))[0]
VERSION_FILE_NAME = os.path.join( root_path, 'VERSION')

with open(VERSION_FILE_NAME, 'r') as version_file:
    VERSION = version_file.readline().strip()

sys.path.insert(0, root_path)

usage = "usage: %prog [options] [FILE] "
parser = optparse.OptionParser(usage=usage, version="%prog {0}".format(VERSION))

#verbose_group = optparse.OptionGroup(parser,'Verbose options')
#verbose_group.add_option("-q", "--quiet",
#                         action="store_const", const=0, default=1, dest="verbose")
#verbose_group.add_option("-v", "--verbose",
#                         action="store_const", const=1, dest="verbose")
#verbose_group.add_option("--noisy",
#                         action="store_const", const=2, dest="verbose")

#parser.add_option_group(verbose_group)
parser.add_option("-f", "--file", default = None, dest='script_file',
                  help="Use script file FILE")
parser.add_option("-s", "--specfile", default= None , metavar='SPECFILE', action="callback", callback=cb_string, dest = 'specfile',
                  help="Use the spectrum provided in SPECFILE")
parser.add_option("--specfunction", default= None , metavar='SPECFUNCTION', action="callback", callback=cb_string, dest = 'specfunction',
                  help="Use the spectrum provided in SPECFUNCTION")
parser.add_option("-b","--branching", metavar='BRANCHING', action='callback', callback=cb_float, dest = 'branchings',
                  help="If using more than one spectrum specify the branching ratio")
parser.add_option("-m","--model", dest='model', metavar='MODEL',
                  help="Load a preprocessed model")
parser.add_option("--rebuild-model", action='store_true', dest='rebuild_model', default=False,
                  help="Force rebuilding a model")
parser.add_option("--hist", default='annihilation', choices=['annihilation','annihilation_halos','decay','PBH','PBH2','accreting_PBH'], dest='injection_history',
                  help="Define the injection history of the model.")
parser.add_option("--mass", type="float", dest='mass',
                  help="Define the mass of the DM-candidate [in GeV] or the PBH mass [in g for evaporating PBH and Msun for accreting ones].")
parser.add_option("--Emin", type='float', dest='Emin',
                  help="Minimal energy for the convolution over tranfer functions. Default set to 5keV (minimal energy of the tables).")
parser.add_option("--Emax", type='float', dest='Emax',
                  help="Maximal energy for the convolution over tranfer functions. Default set to 1TeV (maximal energy of the tables).")
parser.add_option("--accretion_recipe",type="string",dest="accretion_recipe",
				  help = "Define the accretion recipe used to compute the energy injection associated to accreting PBH: disk_accretion or spherical_accretion.")
parser.add_option("--log10mass", type="float", dest='log10mass',default=None,
                  help="Define the log10 of the mass of the DM-candidate [mass in GeV].")
parser.add_option("--tdec", type='float', dest='t_dec',
                  help="Define the lifetime of the DM-candidate.")
parser.add_option("--zh", type='float', dest='zh',
                  help="Define the onset of halos formation.")
parser.add_option("--fh", type='float', dest='fh',
                  help="Define the amplitude of DM halos.")
parser.add_option("", "--use-background", dest="background", nargs=3, type="float", default=(67.27, 0.3156, 8e-5),
                  help="Define the background parameters (H0, Omega_m, Omega_r) for the calculation of H(z) and t(z)")
parser.add_option("--extra-options", dest="extra", metavar="EXTRA.yaml",
                  help="Yaml-File with additional parameters")

(options, args) = parser.parse_args()
if len(args) == 0:
    args = ''

os.environ['DARKAGES_BG_H0'] = '{0}'.format(options.background[0])
os.environ['DARKAGES_BG_OM_M'] = '{0}'.format(options.background[1])
os.environ['DARKAGES_BG_OM_R'] = '{0}'.format(options.background[2])

from DarkAges import transfer_functions, logEnergies, redshift, DarkAgesError
from DarkAges.common import print_info
import DarkAges.recipes as recipes

DarkOptions = dict()
#keys_to_search = ['mass','t_dec','background']
#for key in keys_to_search:
#	if hasattr(options, key):
#		DarkOptions.update({key : getattr(options, key)})

if options.extra:
	import yaml
	with open(options.extra, 'r') as stream:
		additional_DarkOptions = yaml.load(stream)
		DarkOptions.update(additional_DarkOptions)
		del additional_DarkOptions

if options.script_file:
	os.environ['DARKAGES_TOPLEVEL_PID'] = '{:d}'.format(os.getpid())
	os.environ['DARKAGES_TOPLEVEL_RANDN'] = '{:d}'.format(random_num)
	import yaml
	with open(os.path.join( os.environ['DARKAGES_BASE'], 'pid_{:d}_{:d}.yaml'.format(os.getpid(), random_num )), 'wb') as options_dumper:
		yaml.dump(DarkOptions, options_dumper)

import atexit
@atexit.register
def goodbye():
	if options.script_file:
		try:
			os.remove( os.path.join( os.environ['DARKAGES_BASE'], 'pid_{:d}_{:d}.yaml'.format(os.getpid(), random_num )) )
		except OSError:
			pass
if options.log10mass:
        options.mass = 10**options.log10mass
        print_info('Setting mass to {:.2e}'.format(options.mass))
        del options.log10mass

if options.injection_history == 'decay' and (options.t_dec==None):
	raise DarkAgesError('With choosing the injection history: "decay" you need to specify the lifetime of the DM-candidate with "--tdec"')

if options.injection_history == 'PBH':
	sys.exit( recipes.evaporating_PBH(options.mass, transfer_functions, logEnergies, redshift, **DarkOptions) )

#if options.injection_history == 'PBH2':
#	sys.exit( recipes.evaporating_PBH(options.mass, transfer_functions, logEnergies, redshift, merge_ion=True) )
if options.injection_history == 'accreting_PBH':
	sys.exit( recipes.accreting_PBH(options.mass, options.accretion_recipe, transfer_functions, logEnergies, redshift, **DarkOptions) )



if options.injection_history == 'accreting_PBH' and ((options.accretion_recipe==None)):
	raise DarkAgesError('When choosing the injection history: "accreting_PBH" you need to specify the accretion recipe: spherical_accretion or disk_accretion.')
if options.injection_history == 'accreting_PBH' and options.accretion_recipe != 'disk_accretion' and options.accretion_recipe != 'spherical_accretion':
	raise DarkAgesError('I couldnt understand the parameter "recipe". It has to be one among: disk_accretion and spherical_accretion.')

if options.model:
	sys.exit( recipes.access_model(options.model, options.rebuild_model, args, **DarkOptions) )

if options.script_file:
	sys.exit( recipes.execute_script_file(options.script_file, args) )

if options.specfile:
	if not options.mass:
		raise DarkAgesError('In the mode "-s (--spec)"-mode, you nedd to specify the mass via the option: "--mass"')
	if not options.branchings:
		options.branchings = np.asarray([1.])
	else:
		options.branchings = np.asarray(options.branchings)
	try:
		assert abs(sum(options.branchings) - 1) <= 1e-5
	except AssertionError:
		raise DarkAgesError('The branching ratios do not add up to one')
	try:
		assert len(options.specfile) == len(options.branchings)
	except AssertionError:
		raise DarkAgesError('The number of spectra (== {:d}) and the number of branching ratios (== {:d}) do not match'.format(len(options.specfile),len(options.branchings)))

	if hasattr(options, 't_dec'):
		sys.exit( recipes.loading_from_specfiles(options.specfile, transfer_functions, logEnergies, redshift, options.mass, options.t_dec,options.zh,options.fh, options.injection_history, branchings=options.branchings) )
	else:
		sys.exit( recipes.loading_from_specfiles(options.specfile, transfer_functions, logEnergies, redshift, options.mass, np.inf, options.injection_history, branchings=options.branchings) )

# if not options.specfile and not options.specfunction:
# 	raise DarkAgesError('You forgot to give a specifile!! specify it via "--specfile" or "--specfunction"')
